// Code generated by goctl. DO NOT EDIT.
// Source: article.proto

package server

import (
	"context"

	"gozero/app/article/cmd/rpc/internal/logic"
	"gozero/app/article/cmd/rpc/internal/svc"
	"gozero/app/article/cmd/rpc/pb"
)

type ArticleServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedArticleServer
}

func NewArticleServer(svcCtx *svc.ServiceContext) *ArticleServer {
	return &ArticleServer{
		svcCtx: svcCtx,
	}
}

// -----------------------addrs-----------------------
func (s *ArticleServer) AddAddrs(ctx context.Context, in *pb.AddAddrsReq) (*pb.AddAddrsResp, error) {
	l := logic.NewAddAddrsLogic(ctx, s.svcCtx)
	return l.AddAddrs(in)
}

func (s *ArticleServer) UpdateAddrs(ctx context.Context, in *pb.UpdateAddrsReq) (*pb.UpdateAddrsResp, error) {
	l := logic.NewUpdateAddrsLogic(ctx, s.svcCtx)
	return l.UpdateAddrs(in)
}

func (s *ArticleServer) DelAddrs(ctx context.Context, in *pb.DelAddrsReq) (*pb.DelAddrsResp, error) {
	l := logic.NewDelAddrsLogic(ctx, s.svcCtx)
	return l.DelAddrs(in)
}

func (s *ArticleServer) GetAddrsById(ctx context.Context, in *pb.GetAddrsByIdReq) (*pb.GetAddrsByIdResp, error) {
	l := logic.NewGetAddrsByIdLogic(ctx, s.svcCtx)
	return l.GetAddrsById(in)
}

func (s *ArticleServer) SearchAddrs(ctx context.Context, in *pb.SearchAddrsReq) (*pb.SearchAddrsResp, error) {
	l := logic.NewSearchAddrsLogic(ctx, s.svcCtx)
	return l.SearchAddrs(in)
}

// -----------------------alerts-----------------------
func (s *ArticleServer) AddAlerts(ctx context.Context, in *pb.AddAlertsReq) (*pb.AddAlertsResp, error) {
	l := logic.NewAddAlertsLogic(ctx, s.svcCtx)
	return l.AddAlerts(in)
}

func (s *ArticleServer) UpdateAlerts(ctx context.Context, in *pb.UpdateAlertsReq) (*pb.UpdateAlertsResp, error) {
	l := logic.NewUpdateAlertsLogic(ctx, s.svcCtx)
	return l.UpdateAlerts(in)
}

func (s *ArticleServer) DelAlerts(ctx context.Context, in *pb.DelAlertsReq) (*pb.DelAlertsResp, error) {
	l := logic.NewDelAlertsLogic(ctx, s.svcCtx)
	return l.DelAlerts(in)
}

func (s *ArticleServer) GetAlertsById(ctx context.Context, in *pb.GetAlertsByIdReq) (*pb.GetAlertsByIdResp, error) {
	l := logic.NewGetAlertsByIdLogic(ctx, s.svcCtx)
	return l.GetAlertsById(in)
}

func (s *ArticleServer) SearchAlerts(ctx context.Context, in *pb.SearchAlertsReq) (*pb.SearchAlertsResp, error) {
	l := logic.NewSearchAlertsLogic(ctx, s.svcCtx)
	return l.SearchAlerts(in)
}

// -----------------------article-----------------------
func (s *ArticleServer) AddArticle(ctx context.Context, in *pb.AddArticleReq) (*pb.AddArticleResp, error) {
	l := logic.NewAddArticleLogic(ctx, s.svcCtx)
	return l.AddArticle(in)
}

func (s *ArticleServer) UpdateArticle(ctx context.Context, in *pb.UpdateArticleReq) (*pb.UpdateArticleResp, error) {
	l := logic.NewUpdateArticleLogic(ctx, s.svcCtx)
	return l.UpdateArticle(in)
}

func (s *ArticleServer) DelArticle(ctx context.Context, in *pb.DelArticleReq) (*pb.DelArticleResp, error) {
	l := logic.NewDelArticleLogic(ctx, s.svcCtx)
	return l.DelArticle(in)
}

func (s *ArticleServer) GetArticleById(ctx context.Context, in *pb.GetArticleByIdReq) (*pb.GetArticleByIdResp, error) {
	l := logic.NewGetArticleByIdLogic(ctx, s.svcCtx)
	return l.GetArticleById(in)
}

func (s *ArticleServer) SearchArticle(ctx context.Context, in *pb.SearchArticleReq) (*pb.SearchArticleResp, error) {
	l := logic.NewSearchArticleLogic(ctx, s.svcCtx)
	return l.SearchArticle(in)
}

// -----------------------class-----------------------
func (s *ArticleServer) AddClass(ctx context.Context, in *pb.AddClassReq) (*pb.AddClassResp, error) {
	l := logic.NewAddClassLogic(ctx, s.svcCtx)
	return l.AddClass(in)
}

func (s *ArticleServer) UpdateClass(ctx context.Context, in *pb.UpdateClassReq) (*pb.UpdateClassResp, error) {
	l := logic.NewUpdateClassLogic(ctx, s.svcCtx)
	return l.UpdateClass(in)
}

func (s *ArticleServer) DelClass(ctx context.Context, in *pb.DelClassReq) (*pb.DelClassResp, error) {
	l := logic.NewDelClassLogic(ctx, s.svcCtx)
	return l.DelClass(in)
}

func (s *ArticleServer) GetClassById(ctx context.Context, in *pb.GetClassByIdReq) (*pb.GetClassByIdResp, error) {
	l := logic.NewGetClassByIdLogic(ctx, s.svcCtx)
	return l.GetClassById(in)
}

func (s *ArticleServer) SearchClass(ctx context.Context, in *pb.SearchClassReq) (*pb.SearchClassResp, error) {
	l := logic.NewSearchClassLogic(ctx, s.svcCtx)
	return l.SearchClass(in)
}

// -----------------------clusterInfo-----------------------
func (s *ArticleServer) AddClusterInfo(ctx context.Context, in *pb.AddClusterInfoReq) (*pb.AddClusterInfoResp, error) {
	l := logic.NewAddClusterInfoLogic(ctx, s.svcCtx)
	return l.AddClusterInfo(in)
}

func (s *ArticleServer) UpdateClusterInfo(ctx context.Context, in *pb.UpdateClusterInfoReq) (*pb.UpdateClusterInfoResp, error) {
	l := logic.NewUpdateClusterInfoLogic(ctx, s.svcCtx)
	return l.UpdateClusterInfo(in)
}

func (s *ArticleServer) DelClusterInfo(ctx context.Context, in *pb.DelClusterInfoReq) (*pb.DelClusterInfoResp, error) {
	l := logic.NewDelClusterInfoLogic(ctx, s.svcCtx)
	return l.DelClusterInfo(in)
}

func (s *ArticleServer) GetClusterInfoById(ctx context.Context, in *pb.GetClusterInfoByIdReq) (*pb.GetClusterInfoByIdResp, error) {
	l := logic.NewGetClusterInfoByIdLogic(ctx, s.svcCtx)
	return l.GetClusterInfoById(in)
}

func (s *ArticleServer) SearchClusterInfo(ctx context.Context, in *pb.SearchClusterInfoReq) (*pb.SearchClusterInfoResp, error) {
	l := logic.NewSearchClusterInfoLogic(ctx, s.svcCtx)
	return l.SearchClusterInfo(in)
}

// -----------------------course-----------------------
func (s *ArticleServer) AddCourse(ctx context.Context, in *pb.AddCourseReq) (*pb.AddCourseResp, error) {
	l := logic.NewAddCourseLogic(ctx, s.svcCtx)
	return l.AddCourse(in)
}

func (s *ArticleServer) UpdateCourse(ctx context.Context, in *pb.UpdateCourseReq) (*pb.UpdateCourseResp, error) {
	l := logic.NewUpdateCourseLogic(ctx, s.svcCtx)
	return l.UpdateCourse(in)
}

func (s *ArticleServer) DelCourse(ctx context.Context, in *pb.DelCourseReq) (*pb.DelCourseResp, error) {
	l := logic.NewDelCourseLogic(ctx, s.svcCtx)
	return l.DelCourse(in)
}

func (s *ArticleServer) GetCourseById(ctx context.Context, in *pb.GetCourseByIdReq) (*pb.GetCourseByIdResp, error) {
	l := logic.NewGetCourseByIdLogic(ctx, s.svcCtx)
	return l.GetCourseById(in)
}

func (s *ArticleServer) SearchCourse(ctx context.Context, in *pb.SearchCourseReq) (*pb.SearchCourseResp, error) {
	l := logic.NewSearchCourseLogic(ctx, s.svcCtx)
	return l.SearchCourse(in)
}

// -----------------------Custer-----------------------
func (s *ArticleServer) AddCuster(ctx context.Context, in *pb.AddCusterReq) (*pb.AddCusterResp, error) {
	l := logic.NewAddCusterLogic(ctx, s.svcCtx)
	return l.AddCuster(in)
}

func (s *ArticleServer) UpdateCuster(ctx context.Context, in *pb.UpdateCusterReq) (*pb.UpdateCusterResp, error) {
	l := logic.NewUpdateCusterLogic(ctx, s.svcCtx)
	return l.UpdateCuster(in)
}

func (s *ArticleServer) DelCuster(ctx context.Context, in *pb.DelCusterReq) (*pb.DelCusterResp, error) {
	l := logic.NewDelCusterLogic(ctx, s.svcCtx)
	return l.DelCuster(in)
}

func (s *ArticleServer) GetCusterById(ctx context.Context, in *pb.GetCusterByIdReq) (*pb.GetCusterByIdResp, error) {
	l := logic.NewGetCusterByIdLogic(ctx, s.svcCtx)
	return l.GetCusterById(in)
}

func (s *ArticleServer) SearchCuster(ctx context.Context, in *pb.SearchCusterReq) (*pb.SearchCusterResp, error) {
	l := logic.NewSearchCusterLogic(ctx, s.svcCtx)
	return l.SearchCuster(in)
}

// -----------------------student-----------------------
func (s *ArticleServer) AddStudent(ctx context.Context, in *pb.AddStudentReq) (*pb.AddStudentResp, error) {
	l := logic.NewAddStudentLogic(ctx, s.svcCtx)
	return l.AddStudent(in)
}

func (s *ArticleServer) UpdateStudent(ctx context.Context, in *pb.UpdateStudentReq) (*pb.UpdateStudentResp, error) {
	l := logic.NewUpdateStudentLogic(ctx, s.svcCtx)
	return l.UpdateStudent(in)
}

func (s *ArticleServer) DelStudent(ctx context.Context, in *pb.DelStudentReq) (*pb.DelStudentResp, error) {
	l := logic.NewDelStudentLogic(ctx, s.svcCtx)
	return l.DelStudent(in)
}

func (s *ArticleServer) GetStudentById(ctx context.Context, in *pb.GetStudentByIdReq) (*pb.GetStudentByIdResp, error) {
	l := logic.NewGetStudentByIdLogic(ctx, s.svcCtx)
	return l.GetStudentById(in)
}

func (s *ArticleServer) SearchStudent(ctx context.Context, in *pb.SearchStudentReq) (*pb.SearchStudentResp, error) {
	l := logic.NewSearchStudentLogic(ctx, s.svcCtx)
	return l.SearchStudent(in)
}

// -----------------------studentCourse-----------------------
func (s *ArticleServer) AddStudentCourse(ctx context.Context, in *pb.AddStudentCourseReq) (*pb.AddStudentCourseResp, error) {
	l := logic.NewAddStudentCourseLogic(ctx, s.svcCtx)
	return l.AddStudentCourse(in)
}

func (s *ArticleServer) UpdateStudentCourse(ctx context.Context, in *pb.UpdateStudentCourseReq) (*pb.UpdateStudentCourseResp, error) {
	l := logic.NewUpdateStudentCourseLogic(ctx, s.svcCtx)
	return l.UpdateStudentCourse(in)
}

func (s *ArticleServer) DelStudentCourse(ctx context.Context, in *pb.DelStudentCourseReq) (*pb.DelStudentCourseResp, error) {
	l := logic.NewDelStudentCourseLogic(ctx, s.svcCtx)
	return l.DelStudentCourse(in)
}

func (s *ArticleServer) GetStudentCourseById(ctx context.Context, in *pb.GetStudentCourseByIdReq) (*pb.GetStudentCourseByIdResp, error) {
	l := logic.NewGetStudentCourseByIdLogic(ctx, s.svcCtx)
	return l.GetStudentCourseById(in)
}

func (s *ArticleServer) SearchStudentCourse(ctx context.Context, in *pb.SearchStudentCourseReq) (*pb.SearchStudentCourseResp, error) {
	l := logic.NewSearchStudentCourseLogic(ctx, s.svcCtx)
	return l.SearchStudentCourse(in)
}

// -----------------------tasks-----------------------
func (s *ArticleServer) AddTasks(ctx context.Context, in *pb.AddTasksReq) (*pb.AddTasksResp, error) {
	l := logic.NewAddTasksLogic(ctx, s.svcCtx)
	return l.AddTasks(in)
}

func (s *ArticleServer) UpdateTasks(ctx context.Context, in *pb.UpdateTasksReq) (*pb.UpdateTasksResp, error) {
	l := logic.NewUpdateTasksLogic(ctx, s.svcCtx)
	return l.UpdateTasks(in)
}

func (s *ArticleServer) DelTasks(ctx context.Context, in *pb.DelTasksReq) (*pb.DelTasksResp, error) {
	l := logic.NewDelTasksLogic(ctx, s.svcCtx)
	return l.DelTasks(in)
}

func (s *ArticleServer) GetTasksById(ctx context.Context, in *pb.GetTasksByIdReq) (*pb.GetTasksByIdResp, error) {
	l := logic.NewGetTasksByIdLogic(ctx, s.svcCtx)
	return l.GetTasksById(in)
}

func (s *ArticleServer) SearchTasks(ctx context.Context, in *pb.SearchTasksReq) (*pb.SearchTasksResp, error) {
	l := logic.NewSearchTasksLogic(ctx, s.svcCtx)
	return l.SearchTasks(in)
}

// -----------------------userInfo-----------------------
func (s *ArticleServer) AddUserInfo(ctx context.Context, in *pb.AddUserInfoReq) (*pb.AddUserInfoResp, error) {
	l := logic.NewAddUserInfoLogic(ctx, s.svcCtx)
	return l.AddUserInfo(in)
}

func (s *ArticleServer) UpdateUserInfo(ctx context.Context, in *pb.UpdateUserInfoReq) (*pb.UpdateUserInfoResp, error) {
	l := logic.NewUpdateUserInfoLogic(ctx, s.svcCtx)
	return l.UpdateUserInfo(in)
}

func (s *ArticleServer) DelUserInfo(ctx context.Context, in *pb.DelUserInfoReq) (*pb.DelUserInfoResp, error) {
	l := logic.NewDelUserInfoLogic(ctx, s.svcCtx)
	return l.DelUserInfo(in)
}

func (s *ArticleServer) GetUserInfoById(ctx context.Context, in *pb.GetUserInfoByIdReq) (*pb.GetUserInfoByIdResp, error) {
	l := logic.NewGetUserInfoByIdLogic(ctx, s.svcCtx)
	return l.GetUserInfoById(in)
}

func (s *ArticleServer) SearchUserInfo(ctx context.Context, in *pb.SearchUserInfoReq) (*pb.SearchUserInfoResp, error) {
	l := logic.NewSearchUserInfoLogic(ctx, s.svcCtx)
	return l.SearchUserInfo(in)
}

// -----------------------workflow-----------------------
func (s *ArticleServer) AddWorkflow(ctx context.Context, in *pb.AddWorkflowReq) (*pb.AddWorkflowResp, error) {
	l := logic.NewAddWorkflowLogic(ctx, s.svcCtx)
	return l.AddWorkflow(in)
}

func (s *ArticleServer) UpdateWorkflow(ctx context.Context, in *pb.UpdateWorkflowReq) (*pb.UpdateWorkflowResp, error) {
	l := logic.NewUpdateWorkflowLogic(ctx, s.svcCtx)
	return l.UpdateWorkflow(in)
}

func (s *ArticleServer) DelWorkflow(ctx context.Context, in *pb.DelWorkflowReq) (*pb.DelWorkflowResp, error) {
	l := logic.NewDelWorkflowLogic(ctx, s.svcCtx)
	return l.DelWorkflow(in)
}

func (s *ArticleServer) GetWorkflowById(ctx context.Context, in *pb.GetWorkflowByIdReq) (*pb.GetWorkflowByIdResp, error) {
	l := logic.NewGetWorkflowByIdLogic(ctx, s.svcCtx)
	return l.GetWorkflowById(in)
}

func (s *ArticleServer) SearchWorkflow(ctx context.Context, in *pb.SearchWorkflowReq) (*pb.SearchWorkflowResp, error) {
	l := logic.NewSearchWorkflowLogic(ctx, s.svcCtx)
	return l.SearchWorkflow(in)
}
