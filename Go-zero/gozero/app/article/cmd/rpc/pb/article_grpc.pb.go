// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.5
// source: article.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Article_AddAddrs_FullMethodName             = "/pb.article/AddAddrs"
	Article_UpdateAddrs_FullMethodName          = "/pb.article/UpdateAddrs"
	Article_DelAddrs_FullMethodName             = "/pb.article/DelAddrs"
	Article_GetAddrsById_FullMethodName         = "/pb.article/GetAddrsById"
	Article_SearchAddrs_FullMethodName          = "/pb.article/SearchAddrs"
	Article_AddAlerts_FullMethodName            = "/pb.article/AddAlerts"
	Article_UpdateAlerts_FullMethodName         = "/pb.article/UpdateAlerts"
	Article_DelAlerts_FullMethodName            = "/pb.article/DelAlerts"
	Article_GetAlertsById_FullMethodName        = "/pb.article/GetAlertsById"
	Article_SearchAlerts_FullMethodName         = "/pb.article/SearchAlerts"
	Article_AddArticle_FullMethodName           = "/pb.article/AddArticle"
	Article_UpdateArticle_FullMethodName        = "/pb.article/UpdateArticle"
	Article_DelArticle_FullMethodName           = "/pb.article/DelArticle"
	Article_GetArticleById_FullMethodName       = "/pb.article/GetArticleById"
	Article_SearchArticle_FullMethodName        = "/pb.article/SearchArticle"
	Article_AddClass_FullMethodName             = "/pb.article/AddClass"
	Article_UpdateClass_FullMethodName          = "/pb.article/UpdateClass"
	Article_DelClass_FullMethodName             = "/pb.article/DelClass"
	Article_GetClassById_FullMethodName         = "/pb.article/GetClassById"
	Article_SearchClass_FullMethodName          = "/pb.article/SearchClass"
	Article_AddClusterInfo_FullMethodName       = "/pb.article/AddClusterInfo"
	Article_UpdateClusterInfo_FullMethodName    = "/pb.article/UpdateClusterInfo"
	Article_DelClusterInfo_FullMethodName       = "/pb.article/DelClusterInfo"
	Article_GetClusterInfoById_FullMethodName   = "/pb.article/GetClusterInfoById"
	Article_SearchClusterInfo_FullMethodName    = "/pb.article/SearchClusterInfo"
	Article_AddCourse_FullMethodName            = "/pb.article/AddCourse"
	Article_UpdateCourse_FullMethodName         = "/pb.article/UpdateCourse"
	Article_DelCourse_FullMethodName            = "/pb.article/DelCourse"
	Article_GetCourseById_FullMethodName        = "/pb.article/GetCourseById"
	Article_SearchCourse_FullMethodName         = "/pb.article/SearchCourse"
	Article_AddCuster_FullMethodName            = "/pb.article/AddCuster"
	Article_UpdateCuster_FullMethodName         = "/pb.article/UpdateCuster"
	Article_DelCuster_FullMethodName            = "/pb.article/DelCuster"
	Article_GetCusterById_FullMethodName        = "/pb.article/GetCusterById"
	Article_SearchCuster_FullMethodName         = "/pb.article/SearchCuster"
	Article_AddStudent_FullMethodName           = "/pb.article/AddStudent"
	Article_UpdateStudent_FullMethodName        = "/pb.article/UpdateStudent"
	Article_DelStudent_FullMethodName           = "/pb.article/DelStudent"
	Article_GetStudentById_FullMethodName       = "/pb.article/GetStudentById"
	Article_SearchStudent_FullMethodName        = "/pb.article/SearchStudent"
	Article_AddStudentCourse_FullMethodName     = "/pb.article/AddStudentCourse"
	Article_UpdateStudentCourse_FullMethodName  = "/pb.article/UpdateStudentCourse"
	Article_DelStudentCourse_FullMethodName     = "/pb.article/DelStudentCourse"
	Article_GetStudentCourseById_FullMethodName = "/pb.article/GetStudentCourseById"
	Article_SearchStudentCourse_FullMethodName  = "/pb.article/SearchStudentCourse"
	Article_AddTasks_FullMethodName             = "/pb.article/AddTasks"
	Article_UpdateTasks_FullMethodName          = "/pb.article/UpdateTasks"
	Article_DelTasks_FullMethodName             = "/pb.article/DelTasks"
	Article_GetTasksById_FullMethodName         = "/pb.article/GetTasksById"
	Article_SearchTasks_FullMethodName          = "/pb.article/SearchTasks"
	Article_AddUserInfo_FullMethodName          = "/pb.article/AddUserInfo"
	Article_UpdateUserInfo_FullMethodName       = "/pb.article/UpdateUserInfo"
	Article_DelUserInfo_FullMethodName          = "/pb.article/DelUserInfo"
	Article_GetUserInfoById_FullMethodName      = "/pb.article/GetUserInfoById"
	Article_SearchUserInfo_FullMethodName       = "/pb.article/SearchUserInfo"
	Article_AddWorkflow_FullMethodName          = "/pb.article/AddWorkflow"
	Article_UpdateWorkflow_FullMethodName       = "/pb.article/UpdateWorkflow"
	Article_DelWorkflow_FullMethodName          = "/pb.article/DelWorkflow"
	Article_GetWorkflowById_FullMethodName      = "/pb.article/GetWorkflowById"
	Article_SearchWorkflow_FullMethodName       = "/pb.article/SearchWorkflow"
)

// ArticleClient is the client API for Article service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleClient interface {
	// -----------------------addrs-----------------------
	AddAddrs(ctx context.Context, in *AddAddrsReq, opts ...grpc.CallOption) (*AddAddrsResp, error)
	UpdateAddrs(ctx context.Context, in *UpdateAddrsReq, opts ...grpc.CallOption) (*UpdateAddrsResp, error)
	DelAddrs(ctx context.Context, in *DelAddrsReq, opts ...grpc.CallOption) (*DelAddrsResp, error)
	GetAddrsById(ctx context.Context, in *GetAddrsByIdReq, opts ...grpc.CallOption) (*GetAddrsByIdResp, error)
	SearchAddrs(ctx context.Context, in *SearchAddrsReq, opts ...grpc.CallOption) (*SearchAddrsResp, error)
	// -----------------------alerts-----------------------
	AddAlerts(ctx context.Context, in *AddAlertsReq, opts ...grpc.CallOption) (*AddAlertsResp, error)
	UpdateAlerts(ctx context.Context, in *UpdateAlertsReq, opts ...grpc.CallOption) (*UpdateAlertsResp, error)
	DelAlerts(ctx context.Context, in *DelAlertsReq, opts ...grpc.CallOption) (*DelAlertsResp, error)
	GetAlertsById(ctx context.Context, in *GetAlertsByIdReq, opts ...grpc.CallOption) (*GetAlertsByIdResp, error)
	SearchAlerts(ctx context.Context, in *SearchAlertsReq, opts ...grpc.CallOption) (*SearchAlertsResp, error)
	// -----------------------article-----------------------
	AddArticle(ctx context.Context, in *AddArticleReq, opts ...grpc.CallOption) (*AddArticleResp, error)
	UpdateArticle(ctx context.Context, in *UpdateArticleReq, opts ...grpc.CallOption) (*UpdateArticleResp, error)
	DelArticle(ctx context.Context, in *DelArticleReq, opts ...grpc.CallOption) (*DelArticleResp, error)
	GetArticleById(ctx context.Context, in *GetArticleByIdReq, opts ...grpc.CallOption) (*GetArticleByIdResp, error)
	SearchArticle(ctx context.Context, in *SearchArticleReq, opts ...grpc.CallOption) (*SearchArticleResp, error)
	// -----------------------class-----------------------
	AddClass(ctx context.Context, in *AddClassReq, opts ...grpc.CallOption) (*AddClassResp, error)
	UpdateClass(ctx context.Context, in *UpdateClassReq, opts ...grpc.CallOption) (*UpdateClassResp, error)
	DelClass(ctx context.Context, in *DelClassReq, opts ...grpc.CallOption) (*DelClassResp, error)
	GetClassById(ctx context.Context, in *GetClassByIdReq, opts ...grpc.CallOption) (*GetClassByIdResp, error)
	SearchClass(ctx context.Context, in *SearchClassReq, opts ...grpc.CallOption) (*SearchClassResp, error)
	// -----------------------clusterInfo-----------------------
	AddClusterInfo(ctx context.Context, in *AddClusterInfoReq, opts ...grpc.CallOption) (*AddClusterInfoResp, error)
	UpdateClusterInfo(ctx context.Context, in *UpdateClusterInfoReq, opts ...grpc.CallOption) (*UpdateClusterInfoResp, error)
	DelClusterInfo(ctx context.Context, in *DelClusterInfoReq, opts ...grpc.CallOption) (*DelClusterInfoResp, error)
	GetClusterInfoById(ctx context.Context, in *GetClusterInfoByIdReq, opts ...grpc.CallOption) (*GetClusterInfoByIdResp, error)
	SearchClusterInfo(ctx context.Context, in *SearchClusterInfoReq, opts ...grpc.CallOption) (*SearchClusterInfoResp, error)
	// -----------------------course-----------------------
	AddCourse(ctx context.Context, in *AddCourseReq, opts ...grpc.CallOption) (*AddCourseResp, error)
	UpdateCourse(ctx context.Context, in *UpdateCourseReq, opts ...grpc.CallOption) (*UpdateCourseResp, error)
	DelCourse(ctx context.Context, in *DelCourseReq, opts ...grpc.CallOption) (*DelCourseResp, error)
	GetCourseById(ctx context.Context, in *GetCourseByIdReq, opts ...grpc.CallOption) (*GetCourseByIdResp, error)
	SearchCourse(ctx context.Context, in *SearchCourseReq, opts ...grpc.CallOption) (*SearchCourseResp, error)
	// -----------------------Custer-----------------------
	AddCuster(ctx context.Context, in *AddCusterReq, opts ...grpc.CallOption) (*AddCusterResp, error)
	UpdateCuster(ctx context.Context, in *UpdateCusterReq, opts ...grpc.CallOption) (*UpdateCusterResp, error)
	DelCuster(ctx context.Context, in *DelCusterReq, opts ...grpc.CallOption) (*DelCusterResp, error)
	GetCusterById(ctx context.Context, in *GetCusterByIdReq, opts ...grpc.CallOption) (*GetCusterByIdResp, error)
	SearchCuster(ctx context.Context, in *SearchCusterReq, opts ...grpc.CallOption) (*SearchCusterResp, error)
	// -----------------------student-----------------------
	AddStudent(ctx context.Context, in *AddStudentReq, opts ...grpc.CallOption) (*AddStudentResp, error)
	UpdateStudent(ctx context.Context, in *UpdateStudentReq, opts ...grpc.CallOption) (*UpdateStudentResp, error)
	DelStudent(ctx context.Context, in *DelStudentReq, opts ...grpc.CallOption) (*DelStudentResp, error)
	GetStudentById(ctx context.Context, in *GetStudentByIdReq, opts ...grpc.CallOption) (*GetStudentByIdResp, error)
	SearchStudent(ctx context.Context, in *SearchStudentReq, opts ...grpc.CallOption) (*SearchStudentResp, error)
	// -----------------------studentCourse-----------------------
	AddStudentCourse(ctx context.Context, in *AddStudentCourseReq, opts ...grpc.CallOption) (*AddStudentCourseResp, error)
	UpdateStudentCourse(ctx context.Context, in *UpdateStudentCourseReq, opts ...grpc.CallOption) (*UpdateStudentCourseResp, error)
	DelStudentCourse(ctx context.Context, in *DelStudentCourseReq, opts ...grpc.CallOption) (*DelStudentCourseResp, error)
	GetStudentCourseById(ctx context.Context, in *GetStudentCourseByIdReq, opts ...grpc.CallOption) (*GetStudentCourseByIdResp, error)
	SearchStudentCourse(ctx context.Context, in *SearchStudentCourseReq, opts ...grpc.CallOption) (*SearchStudentCourseResp, error)
	// -----------------------tasks-----------------------
	AddTasks(ctx context.Context, in *AddTasksReq, opts ...grpc.CallOption) (*AddTasksResp, error)
	UpdateTasks(ctx context.Context, in *UpdateTasksReq, opts ...grpc.CallOption) (*UpdateTasksResp, error)
	DelTasks(ctx context.Context, in *DelTasksReq, opts ...grpc.CallOption) (*DelTasksResp, error)
	GetTasksById(ctx context.Context, in *GetTasksByIdReq, opts ...grpc.CallOption) (*GetTasksByIdResp, error)
	SearchTasks(ctx context.Context, in *SearchTasksReq, opts ...grpc.CallOption) (*SearchTasksResp, error)
	// -----------------------userInfo-----------------------
	AddUserInfo(ctx context.Context, in *AddUserInfoReq, opts ...grpc.CallOption) (*AddUserInfoResp, error)
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error)
	DelUserInfo(ctx context.Context, in *DelUserInfoReq, opts ...grpc.CallOption) (*DelUserInfoResp, error)
	GetUserInfoById(ctx context.Context, in *GetUserInfoByIdReq, opts ...grpc.CallOption) (*GetUserInfoByIdResp, error)
	SearchUserInfo(ctx context.Context, in *SearchUserInfoReq, opts ...grpc.CallOption) (*SearchUserInfoResp, error)
	// -----------------------workflow-----------------------
	AddWorkflow(ctx context.Context, in *AddWorkflowReq, opts ...grpc.CallOption) (*AddWorkflowResp, error)
	UpdateWorkflow(ctx context.Context, in *UpdateWorkflowReq, opts ...grpc.CallOption) (*UpdateWorkflowResp, error)
	DelWorkflow(ctx context.Context, in *DelWorkflowReq, opts ...grpc.CallOption) (*DelWorkflowResp, error)
	GetWorkflowById(ctx context.Context, in *GetWorkflowByIdReq, opts ...grpc.CallOption) (*GetWorkflowByIdResp, error)
	SearchWorkflow(ctx context.Context, in *SearchWorkflowReq, opts ...grpc.CallOption) (*SearchWorkflowResp, error)
}

type articleClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleClient(cc grpc.ClientConnInterface) ArticleClient {
	return &articleClient{cc}
}

func (c *articleClient) AddAddrs(ctx context.Context, in *AddAddrsReq, opts ...grpc.CallOption) (*AddAddrsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAddrsResp)
	err := c.cc.Invoke(ctx, Article_AddAddrs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) UpdateAddrs(ctx context.Context, in *UpdateAddrsReq, opts ...grpc.CallOption) (*UpdateAddrsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAddrsResp)
	err := c.cc.Invoke(ctx, Article_UpdateAddrs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) DelAddrs(ctx context.Context, in *DelAddrsReq, opts ...grpc.CallOption) (*DelAddrsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelAddrsResp)
	err := c.cc.Invoke(ctx, Article_DelAddrs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetAddrsById(ctx context.Context, in *GetAddrsByIdReq, opts ...grpc.CallOption) (*GetAddrsByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAddrsByIdResp)
	err := c.cc.Invoke(ctx, Article_GetAddrsById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) SearchAddrs(ctx context.Context, in *SearchAddrsReq, opts ...grpc.CallOption) (*SearchAddrsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchAddrsResp)
	err := c.cc.Invoke(ctx, Article_SearchAddrs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) AddAlerts(ctx context.Context, in *AddAlertsReq, opts ...grpc.CallOption) (*AddAlertsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAlertsResp)
	err := c.cc.Invoke(ctx, Article_AddAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) UpdateAlerts(ctx context.Context, in *UpdateAlertsReq, opts ...grpc.CallOption) (*UpdateAlertsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAlertsResp)
	err := c.cc.Invoke(ctx, Article_UpdateAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) DelAlerts(ctx context.Context, in *DelAlertsReq, opts ...grpc.CallOption) (*DelAlertsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelAlertsResp)
	err := c.cc.Invoke(ctx, Article_DelAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetAlertsById(ctx context.Context, in *GetAlertsByIdReq, opts ...grpc.CallOption) (*GetAlertsByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAlertsByIdResp)
	err := c.cc.Invoke(ctx, Article_GetAlertsById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) SearchAlerts(ctx context.Context, in *SearchAlertsReq, opts ...grpc.CallOption) (*SearchAlertsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchAlertsResp)
	err := c.cc.Invoke(ctx, Article_SearchAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) AddArticle(ctx context.Context, in *AddArticleReq, opts ...grpc.CallOption) (*AddArticleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddArticleResp)
	err := c.cc.Invoke(ctx, Article_AddArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) UpdateArticle(ctx context.Context, in *UpdateArticleReq, opts ...grpc.CallOption) (*UpdateArticleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateArticleResp)
	err := c.cc.Invoke(ctx, Article_UpdateArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) DelArticle(ctx context.Context, in *DelArticleReq, opts ...grpc.CallOption) (*DelArticleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelArticleResp)
	err := c.cc.Invoke(ctx, Article_DelArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetArticleById(ctx context.Context, in *GetArticleByIdReq, opts ...grpc.CallOption) (*GetArticleByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArticleByIdResp)
	err := c.cc.Invoke(ctx, Article_GetArticleById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) SearchArticle(ctx context.Context, in *SearchArticleReq, opts ...grpc.CallOption) (*SearchArticleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchArticleResp)
	err := c.cc.Invoke(ctx, Article_SearchArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) AddClass(ctx context.Context, in *AddClassReq, opts ...grpc.CallOption) (*AddClassResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddClassResp)
	err := c.cc.Invoke(ctx, Article_AddClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) UpdateClass(ctx context.Context, in *UpdateClassReq, opts ...grpc.CallOption) (*UpdateClassResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateClassResp)
	err := c.cc.Invoke(ctx, Article_UpdateClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) DelClass(ctx context.Context, in *DelClassReq, opts ...grpc.CallOption) (*DelClassResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelClassResp)
	err := c.cc.Invoke(ctx, Article_DelClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetClassById(ctx context.Context, in *GetClassByIdReq, opts ...grpc.CallOption) (*GetClassByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClassByIdResp)
	err := c.cc.Invoke(ctx, Article_GetClassById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) SearchClass(ctx context.Context, in *SearchClassReq, opts ...grpc.CallOption) (*SearchClassResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchClassResp)
	err := c.cc.Invoke(ctx, Article_SearchClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) AddClusterInfo(ctx context.Context, in *AddClusterInfoReq, opts ...grpc.CallOption) (*AddClusterInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddClusterInfoResp)
	err := c.cc.Invoke(ctx, Article_AddClusterInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) UpdateClusterInfo(ctx context.Context, in *UpdateClusterInfoReq, opts ...grpc.CallOption) (*UpdateClusterInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateClusterInfoResp)
	err := c.cc.Invoke(ctx, Article_UpdateClusterInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) DelClusterInfo(ctx context.Context, in *DelClusterInfoReq, opts ...grpc.CallOption) (*DelClusterInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelClusterInfoResp)
	err := c.cc.Invoke(ctx, Article_DelClusterInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetClusterInfoById(ctx context.Context, in *GetClusterInfoByIdReq, opts ...grpc.CallOption) (*GetClusterInfoByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterInfoByIdResp)
	err := c.cc.Invoke(ctx, Article_GetClusterInfoById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) SearchClusterInfo(ctx context.Context, in *SearchClusterInfoReq, opts ...grpc.CallOption) (*SearchClusterInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchClusterInfoResp)
	err := c.cc.Invoke(ctx, Article_SearchClusterInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) AddCourse(ctx context.Context, in *AddCourseReq, opts ...grpc.CallOption) (*AddCourseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCourseResp)
	err := c.cc.Invoke(ctx, Article_AddCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) UpdateCourse(ctx context.Context, in *UpdateCourseReq, opts ...grpc.CallOption) (*UpdateCourseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCourseResp)
	err := c.cc.Invoke(ctx, Article_UpdateCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) DelCourse(ctx context.Context, in *DelCourseReq, opts ...grpc.CallOption) (*DelCourseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelCourseResp)
	err := c.cc.Invoke(ctx, Article_DelCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetCourseById(ctx context.Context, in *GetCourseByIdReq, opts ...grpc.CallOption) (*GetCourseByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCourseByIdResp)
	err := c.cc.Invoke(ctx, Article_GetCourseById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) SearchCourse(ctx context.Context, in *SearchCourseReq, opts ...grpc.CallOption) (*SearchCourseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchCourseResp)
	err := c.cc.Invoke(ctx, Article_SearchCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) AddCuster(ctx context.Context, in *AddCusterReq, opts ...grpc.CallOption) (*AddCusterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCusterResp)
	err := c.cc.Invoke(ctx, Article_AddCuster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) UpdateCuster(ctx context.Context, in *UpdateCusterReq, opts ...grpc.CallOption) (*UpdateCusterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCusterResp)
	err := c.cc.Invoke(ctx, Article_UpdateCuster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) DelCuster(ctx context.Context, in *DelCusterReq, opts ...grpc.CallOption) (*DelCusterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelCusterResp)
	err := c.cc.Invoke(ctx, Article_DelCuster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetCusterById(ctx context.Context, in *GetCusterByIdReq, opts ...grpc.CallOption) (*GetCusterByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCusterByIdResp)
	err := c.cc.Invoke(ctx, Article_GetCusterById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) SearchCuster(ctx context.Context, in *SearchCusterReq, opts ...grpc.CallOption) (*SearchCusterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchCusterResp)
	err := c.cc.Invoke(ctx, Article_SearchCuster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) AddStudent(ctx context.Context, in *AddStudentReq, opts ...grpc.CallOption) (*AddStudentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddStudentResp)
	err := c.cc.Invoke(ctx, Article_AddStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) UpdateStudent(ctx context.Context, in *UpdateStudentReq, opts ...grpc.CallOption) (*UpdateStudentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStudentResp)
	err := c.cc.Invoke(ctx, Article_UpdateStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) DelStudent(ctx context.Context, in *DelStudentReq, opts ...grpc.CallOption) (*DelStudentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelStudentResp)
	err := c.cc.Invoke(ctx, Article_DelStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetStudentById(ctx context.Context, in *GetStudentByIdReq, opts ...grpc.CallOption) (*GetStudentByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStudentByIdResp)
	err := c.cc.Invoke(ctx, Article_GetStudentById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) SearchStudent(ctx context.Context, in *SearchStudentReq, opts ...grpc.CallOption) (*SearchStudentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchStudentResp)
	err := c.cc.Invoke(ctx, Article_SearchStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) AddStudentCourse(ctx context.Context, in *AddStudentCourseReq, opts ...grpc.CallOption) (*AddStudentCourseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddStudentCourseResp)
	err := c.cc.Invoke(ctx, Article_AddStudentCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) UpdateStudentCourse(ctx context.Context, in *UpdateStudentCourseReq, opts ...grpc.CallOption) (*UpdateStudentCourseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStudentCourseResp)
	err := c.cc.Invoke(ctx, Article_UpdateStudentCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) DelStudentCourse(ctx context.Context, in *DelStudentCourseReq, opts ...grpc.CallOption) (*DelStudentCourseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelStudentCourseResp)
	err := c.cc.Invoke(ctx, Article_DelStudentCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetStudentCourseById(ctx context.Context, in *GetStudentCourseByIdReq, opts ...grpc.CallOption) (*GetStudentCourseByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStudentCourseByIdResp)
	err := c.cc.Invoke(ctx, Article_GetStudentCourseById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) SearchStudentCourse(ctx context.Context, in *SearchStudentCourseReq, opts ...grpc.CallOption) (*SearchStudentCourseResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchStudentCourseResp)
	err := c.cc.Invoke(ctx, Article_SearchStudentCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) AddTasks(ctx context.Context, in *AddTasksReq, opts ...grpc.CallOption) (*AddTasksResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTasksResp)
	err := c.cc.Invoke(ctx, Article_AddTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) UpdateTasks(ctx context.Context, in *UpdateTasksReq, opts ...grpc.CallOption) (*UpdateTasksResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTasksResp)
	err := c.cc.Invoke(ctx, Article_UpdateTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) DelTasks(ctx context.Context, in *DelTasksReq, opts ...grpc.CallOption) (*DelTasksResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelTasksResp)
	err := c.cc.Invoke(ctx, Article_DelTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetTasksById(ctx context.Context, in *GetTasksByIdReq, opts ...grpc.CallOption) (*GetTasksByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTasksByIdResp)
	err := c.cc.Invoke(ctx, Article_GetTasksById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) SearchTasks(ctx context.Context, in *SearchTasksReq, opts ...grpc.CallOption) (*SearchTasksResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchTasksResp)
	err := c.cc.Invoke(ctx, Article_SearchTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) AddUserInfo(ctx context.Context, in *AddUserInfoReq, opts ...grpc.CallOption) (*AddUserInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserInfoResp)
	err := c.cc.Invoke(ctx, Article_AddUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserInfoResp)
	err := c.cc.Invoke(ctx, Article_UpdateUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) DelUserInfo(ctx context.Context, in *DelUserInfoReq, opts ...grpc.CallOption) (*DelUserInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelUserInfoResp)
	err := c.cc.Invoke(ctx, Article_DelUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetUserInfoById(ctx context.Context, in *GetUserInfoByIdReq, opts ...grpc.CallOption) (*GetUserInfoByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserInfoByIdResp)
	err := c.cc.Invoke(ctx, Article_GetUserInfoById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) SearchUserInfo(ctx context.Context, in *SearchUserInfoReq, opts ...grpc.CallOption) (*SearchUserInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchUserInfoResp)
	err := c.cc.Invoke(ctx, Article_SearchUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) AddWorkflow(ctx context.Context, in *AddWorkflowReq, opts ...grpc.CallOption) (*AddWorkflowResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddWorkflowResp)
	err := c.cc.Invoke(ctx, Article_AddWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) UpdateWorkflow(ctx context.Context, in *UpdateWorkflowReq, opts ...grpc.CallOption) (*UpdateWorkflowResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWorkflowResp)
	err := c.cc.Invoke(ctx, Article_UpdateWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) DelWorkflow(ctx context.Context, in *DelWorkflowReq, opts ...grpc.CallOption) (*DelWorkflowResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelWorkflowResp)
	err := c.cc.Invoke(ctx, Article_DelWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetWorkflowById(ctx context.Context, in *GetWorkflowByIdReq, opts ...grpc.CallOption) (*GetWorkflowByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkflowByIdResp)
	err := c.cc.Invoke(ctx, Article_GetWorkflowById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) SearchWorkflow(ctx context.Context, in *SearchWorkflowReq, opts ...grpc.CallOption) (*SearchWorkflowResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchWorkflowResp)
	err := c.cc.Invoke(ctx, Article_SearchWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServer is the server API for Article service.
// All implementations must embed UnimplementedArticleServer
// for forward compatibility.
type ArticleServer interface {
	// -----------------------addrs-----------------------
	AddAddrs(context.Context, *AddAddrsReq) (*AddAddrsResp, error)
	UpdateAddrs(context.Context, *UpdateAddrsReq) (*UpdateAddrsResp, error)
	DelAddrs(context.Context, *DelAddrsReq) (*DelAddrsResp, error)
	GetAddrsById(context.Context, *GetAddrsByIdReq) (*GetAddrsByIdResp, error)
	SearchAddrs(context.Context, *SearchAddrsReq) (*SearchAddrsResp, error)
	// -----------------------alerts-----------------------
	AddAlerts(context.Context, *AddAlertsReq) (*AddAlertsResp, error)
	UpdateAlerts(context.Context, *UpdateAlertsReq) (*UpdateAlertsResp, error)
	DelAlerts(context.Context, *DelAlertsReq) (*DelAlertsResp, error)
	GetAlertsById(context.Context, *GetAlertsByIdReq) (*GetAlertsByIdResp, error)
	SearchAlerts(context.Context, *SearchAlertsReq) (*SearchAlertsResp, error)
	// -----------------------article-----------------------
	AddArticle(context.Context, *AddArticleReq) (*AddArticleResp, error)
	UpdateArticle(context.Context, *UpdateArticleReq) (*UpdateArticleResp, error)
	DelArticle(context.Context, *DelArticleReq) (*DelArticleResp, error)
	GetArticleById(context.Context, *GetArticleByIdReq) (*GetArticleByIdResp, error)
	SearchArticle(context.Context, *SearchArticleReq) (*SearchArticleResp, error)
	// -----------------------class-----------------------
	AddClass(context.Context, *AddClassReq) (*AddClassResp, error)
	UpdateClass(context.Context, *UpdateClassReq) (*UpdateClassResp, error)
	DelClass(context.Context, *DelClassReq) (*DelClassResp, error)
	GetClassById(context.Context, *GetClassByIdReq) (*GetClassByIdResp, error)
	SearchClass(context.Context, *SearchClassReq) (*SearchClassResp, error)
	// -----------------------clusterInfo-----------------------
	AddClusterInfo(context.Context, *AddClusterInfoReq) (*AddClusterInfoResp, error)
	UpdateClusterInfo(context.Context, *UpdateClusterInfoReq) (*UpdateClusterInfoResp, error)
	DelClusterInfo(context.Context, *DelClusterInfoReq) (*DelClusterInfoResp, error)
	GetClusterInfoById(context.Context, *GetClusterInfoByIdReq) (*GetClusterInfoByIdResp, error)
	SearchClusterInfo(context.Context, *SearchClusterInfoReq) (*SearchClusterInfoResp, error)
	// -----------------------course-----------------------
	AddCourse(context.Context, *AddCourseReq) (*AddCourseResp, error)
	UpdateCourse(context.Context, *UpdateCourseReq) (*UpdateCourseResp, error)
	DelCourse(context.Context, *DelCourseReq) (*DelCourseResp, error)
	GetCourseById(context.Context, *GetCourseByIdReq) (*GetCourseByIdResp, error)
	SearchCourse(context.Context, *SearchCourseReq) (*SearchCourseResp, error)
	// -----------------------Custer-----------------------
	AddCuster(context.Context, *AddCusterReq) (*AddCusterResp, error)
	UpdateCuster(context.Context, *UpdateCusterReq) (*UpdateCusterResp, error)
	DelCuster(context.Context, *DelCusterReq) (*DelCusterResp, error)
	GetCusterById(context.Context, *GetCusterByIdReq) (*GetCusterByIdResp, error)
	SearchCuster(context.Context, *SearchCusterReq) (*SearchCusterResp, error)
	// -----------------------student-----------------------
	AddStudent(context.Context, *AddStudentReq) (*AddStudentResp, error)
	UpdateStudent(context.Context, *UpdateStudentReq) (*UpdateStudentResp, error)
	DelStudent(context.Context, *DelStudentReq) (*DelStudentResp, error)
	GetStudentById(context.Context, *GetStudentByIdReq) (*GetStudentByIdResp, error)
	SearchStudent(context.Context, *SearchStudentReq) (*SearchStudentResp, error)
	// -----------------------studentCourse-----------------------
	AddStudentCourse(context.Context, *AddStudentCourseReq) (*AddStudentCourseResp, error)
	UpdateStudentCourse(context.Context, *UpdateStudentCourseReq) (*UpdateStudentCourseResp, error)
	DelStudentCourse(context.Context, *DelStudentCourseReq) (*DelStudentCourseResp, error)
	GetStudentCourseById(context.Context, *GetStudentCourseByIdReq) (*GetStudentCourseByIdResp, error)
	SearchStudentCourse(context.Context, *SearchStudentCourseReq) (*SearchStudentCourseResp, error)
	// -----------------------tasks-----------------------
	AddTasks(context.Context, *AddTasksReq) (*AddTasksResp, error)
	UpdateTasks(context.Context, *UpdateTasksReq) (*UpdateTasksResp, error)
	DelTasks(context.Context, *DelTasksReq) (*DelTasksResp, error)
	GetTasksById(context.Context, *GetTasksByIdReq) (*GetTasksByIdResp, error)
	SearchTasks(context.Context, *SearchTasksReq) (*SearchTasksResp, error)
	// -----------------------userInfo-----------------------
	AddUserInfo(context.Context, *AddUserInfoReq) (*AddUserInfoResp, error)
	UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error)
	DelUserInfo(context.Context, *DelUserInfoReq) (*DelUserInfoResp, error)
	GetUserInfoById(context.Context, *GetUserInfoByIdReq) (*GetUserInfoByIdResp, error)
	SearchUserInfo(context.Context, *SearchUserInfoReq) (*SearchUserInfoResp, error)
	// -----------------------workflow-----------------------
	AddWorkflow(context.Context, *AddWorkflowReq) (*AddWorkflowResp, error)
	UpdateWorkflow(context.Context, *UpdateWorkflowReq) (*UpdateWorkflowResp, error)
	DelWorkflow(context.Context, *DelWorkflowReq) (*DelWorkflowResp, error)
	GetWorkflowById(context.Context, *GetWorkflowByIdReq) (*GetWorkflowByIdResp, error)
	SearchWorkflow(context.Context, *SearchWorkflowReq) (*SearchWorkflowResp, error)
	mustEmbedUnimplementedArticleServer()
}

// UnimplementedArticleServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArticleServer struct{}

func (UnimplementedArticleServer) AddAddrs(context.Context, *AddAddrsReq) (*AddAddrsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAddrs not implemented")
}
func (UnimplementedArticleServer) UpdateAddrs(context.Context, *UpdateAddrsReq) (*UpdateAddrsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddrs not implemented")
}
func (UnimplementedArticleServer) DelAddrs(context.Context, *DelAddrsReq) (*DelAddrsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAddrs not implemented")
}
func (UnimplementedArticleServer) GetAddrsById(context.Context, *GetAddrsByIdReq) (*GetAddrsByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddrsById not implemented")
}
func (UnimplementedArticleServer) SearchAddrs(context.Context, *SearchAddrsReq) (*SearchAddrsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAddrs not implemented")
}
func (UnimplementedArticleServer) AddAlerts(context.Context, *AddAlertsReq) (*AddAlertsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAlerts not implemented")
}
func (UnimplementedArticleServer) UpdateAlerts(context.Context, *UpdateAlertsReq) (*UpdateAlertsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlerts not implemented")
}
func (UnimplementedArticleServer) DelAlerts(context.Context, *DelAlertsReq) (*DelAlertsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAlerts not implemented")
}
func (UnimplementedArticleServer) GetAlertsById(context.Context, *GetAlertsByIdReq) (*GetAlertsByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertsById not implemented")
}
func (UnimplementedArticleServer) SearchAlerts(context.Context, *SearchAlertsReq) (*SearchAlertsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAlerts not implemented")
}
func (UnimplementedArticleServer) AddArticle(context.Context, *AddArticleReq) (*AddArticleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddArticle not implemented")
}
func (UnimplementedArticleServer) UpdateArticle(context.Context, *UpdateArticleReq) (*UpdateArticleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedArticleServer) DelArticle(context.Context, *DelArticleReq) (*DelArticleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelArticle not implemented")
}
func (UnimplementedArticleServer) GetArticleById(context.Context, *GetArticleByIdReq) (*GetArticleByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleById not implemented")
}
func (UnimplementedArticleServer) SearchArticle(context.Context, *SearchArticleReq) (*SearchArticleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchArticle not implemented")
}
func (UnimplementedArticleServer) AddClass(context.Context, *AddClassReq) (*AddClassResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClass not implemented")
}
func (UnimplementedArticleServer) UpdateClass(context.Context, *UpdateClassReq) (*UpdateClassResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClass not implemented")
}
func (UnimplementedArticleServer) DelClass(context.Context, *DelClassReq) (*DelClassResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelClass not implemented")
}
func (UnimplementedArticleServer) GetClassById(context.Context, *GetClassByIdReq) (*GetClassByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassById not implemented")
}
func (UnimplementedArticleServer) SearchClass(context.Context, *SearchClassReq) (*SearchClassResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchClass not implemented")
}
func (UnimplementedArticleServer) AddClusterInfo(context.Context, *AddClusterInfoReq) (*AddClusterInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClusterInfo not implemented")
}
func (UnimplementedArticleServer) UpdateClusterInfo(context.Context, *UpdateClusterInfoReq) (*UpdateClusterInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClusterInfo not implemented")
}
func (UnimplementedArticleServer) DelClusterInfo(context.Context, *DelClusterInfoReq) (*DelClusterInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelClusterInfo not implemented")
}
func (UnimplementedArticleServer) GetClusterInfoById(context.Context, *GetClusterInfoByIdReq) (*GetClusterInfoByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterInfoById not implemented")
}
func (UnimplementedArticleServer) SearchClusterInfo(context.Context, *SearchClusterInfoReq) (*SearchClusterInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchClusterInfo not implemented")
}
func (UnimplementedArticleServer) AddCourse(context.Context, *AddCourseReq) (*AddCourseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCourse not implemented")
}
func (UnimplementedArticleServer) UpdateCourse(context.Context, *UpdateCourseReq) (*UpdateCourseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourse not implemented")
}
func (UnimplementedArticleServer) DelCourse(context.Context, *DelCourseReq) (*DelCourseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCourse not implemented")
}
func (UnimplementedArticleServer) GetCourseById(context.Context, *GetCourseByIdReq) (*GetCourseByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseById not implemented")
}
func (UnimplementedArticleServer) SearchCourse(context.Context, *SearchCourseReq) (*SearchCourseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCourse not implemented")
}
func (UnimplementedArticleServer) AddCuster(context.Context, *AddCusterReq) (*AddCusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCuster not implemented")
}
func (UnimplementedArticleServer) UpdateCuster(context.Context, *UpdateCusterReq) (*UpdateCusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCuster not implemented")
}
func (UnimplementedArticleServer) DelCuster(context.Context, *DelCusterReq) (*DelCusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCuster not implemented")
}
func (UnimplementedArticleServer) GetCusterById(context.Context, *GetCusterByIdReq) (*GetCusterByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCusterById not implemented")
}
func (UnimplementedArticleServer) SearchCuster(context.Context, *SearchCusterReq) (*SearchCusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCuster not implemented")
}
func (UnimplementedArticleServer) AddStudent(context.Context, *AddStudentReq) (*AddStudentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStudent not implemented")
}
func (UnimplementedArticleServer) UpdateStudent(context.Context, *UpdateStudentReq) (*UpdateStudentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudent not implemented")
}
func (UnimplementedArticleServer) DelStudent(context.Context, *DelStudentReq) (*DelStudentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelStudent not implemented")
}
func (UnimplementedArticleServer) GetStudentById(context.Context, *GetStudentByIdReq) (*GetStudentByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentById not implemented")
}
func (UnimplementedArticleServer) SearchStudent(context.Context, *SearchStudentReq) (*SearchStudentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchStudent not implemented")
}
func (UnimplementedArticleServer) AddStudentCourse(context.Context, *AddStudentCourseReq) (*AddStudentCourseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStudentCourse not implemented")
}
func (UnimplementedArticleServer) UpdateStudentCourse(context.Context, *UpdateStudentCourseReq) (*UpdateStudentCourseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudentCourse not implemented")
}
func (UnimplementedArticleServer) DelStudentCourse(context.Context, *DelStudentCourseReq) (*DelStudentCourseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelStudentCourse not implemented")
}
func (UnimplementedArticleServer) GetStudentCourseById(context.Context, *GetStudentCourseByIdReq) (*GetStudentCourseByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentCourseById not implemented")
}
func (UnimplementedArticleServer) SearchStudentCourse(context.Context, *SearchStudentCourseReq) (*SearchStudentCourseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchStudentCourse not implemented")
}
func (UnimplementedArticleServer) AddTasks(context.Context, *AddTasksReq) (*AddTasksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTasks not implemented")
}
func (UnimplementedArticleServer) UpdateTasks(context.Context, *UpdateTasksReq) (*UpdateTasksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTasks not implemented")
}
func (UnimplementedArticleServer) DelTasks(context.Context, *DelTasksReq) (*DelTasksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelTasks not implemented")
}
func (UnimplementedArticleServer) GetTasksById(context.Context, *GetTasksByIdReq) (*GetTasksByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasksById not implemented")
}
func (UnimplementedArticleServer) SearchTasks(context.Context, *SearchTasksReq) (*SearchTasksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTasks not implemented")
}
func (UnimplementedArticleServer) AddUserInfo(context.Context, *AddUserInfoReq) (*AddUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserInfo not implemented")
}
func (UnimplementedArticleServer) UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedArticleServer) DelUserInfo(context.Context, *DelUserInfoReq) (*DelUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserInfo not implemented")
}
func (UnimplementedArticleServer) GetUserInfoById(context.Context, *GetUserInfoByIdReq) (*GetUserInfoByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoById not implemented")
}
func (UnimplementedArticleServer) SearchUserInfo(context.Context, *SearchUserInfoReq) (*SearchUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserInfo not implemented")
}
func (UnimplementedArticleServer) AddWorkflow(context.Context, *AddWorkflowReq) (*AddWorkflowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWorkflow not implemented")
}
func (UnimplementedArticleServer) UpdateWorkflow(context.Context, *UpdateWorkflowReq) (*UpdateWorkflowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkflow not implemented")
}
func (UnimplementedArticleServer) DelWorkflow(context.Context, *DelWorkflowReq) (*DelWorkflowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelWorkflow not implemented")
}
func (UnimplementedArticleServer) GetWorkflowById(context.Context, *GetWorkflowByIdReq) (*GetWorkflowByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowById not implemented")
}
func (UnimplementedArticleServer) SearchWorkflow(context.Context, *SearchWorkflowReq) (*SearchWorkflowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchWorkflow not implemented")
}
func (UnimplementedArticleServer) mustEmbedUnimplementedArticleServer() {}
func (UnimplementedArticleServer) testEmbeddedByValue()                 {}

// UnsafeArticleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleServer will
// result in compilation errors.
type UnsafeArticleServer interface {
	mustEmbedUnimplementedArticleServer()
}

func RegisterArticleServer(s grpc.ServiceRegistrar, srv ArticleServer) {
	// If the following call pancis, it indicates UnimplementedArticleServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Article_ServiceDesc, srv)
}

func _Article_AddAddrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAddrsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).AddAddrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_AddAddrs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).AddAddrs(ctx, req.(*AddAddrsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_UpdateAddrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAddrsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).UpdateAddrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_UpdateAddrs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).UpdateAddrs(ctx, req.(*UpdateAddrsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_DelAddrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAddrsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).DelAddrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_DelAddrs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).DelAddrs(ctx, req.(*DelAddrsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetAddrsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddrsByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetAddrsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetAddrsById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetAddrsById(ctx, req.(*GetAddrsByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_SearchAddrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAddrsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).SearchAddrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_SearchAddrs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).SearchAddrs(ctx, req.(*SearchAddrsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_AddAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAlertsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).AddAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_AddAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).AddAlerts(ctx, req.(*AddAlertsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_UpdateAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlertsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).UpdateAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_UpdateAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).UpdateAlerts(ctx, req.(*UpdateAlertsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_DelAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAlertsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).DelAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_DelAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).DelAlerts(ctx, req.(*DelAlertsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetAlertsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertsByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetAlertsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetAlertsById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetAlertsById(ctx, req.(*GetAlertsByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_SearchAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAlertsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).SearchAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_SearchAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).SearchAlerts(ctx, req.(*SearchAlertsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_AddArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).AddArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_AddArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).AddArticle(ctx, req.(*AddArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_UpdateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).UpdateArticle(ctx, req.(*UpdateArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_DelArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).DelArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_DelArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).DelArticle(ctx, req.(*DelArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetArticleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetArticleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetArticleById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetArticleById(ctx, req.(*GetArticleByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_SearchArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).SearchArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_SearchArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).SearchArticle(ctx, req.(*SearchArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_AddClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClassReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).AddClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_AddClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).AddClass(ctx, req.(*AddClassReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_UpdateClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClassReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).UpdateClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_UpdateClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).UpdateClass(ctx, req.(*UpdateClassReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_DelClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelClassReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).DelClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_DelClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).DelClass(ctx, req.(*DelClassReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetClassById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetClassById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetClassById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetClassById(ctx, req.(*GetClassByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_SearchClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchClassReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).SearchClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_SearchClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).SearchClass(ctx, req.(*SearchClassReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_AddClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClusterInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).AddClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_AddClusterInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).AddClusterInfo(ctx, req.(*AddClusterInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_UpdateClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).UpdateClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_UpdateClusterInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).UpdateClusterInfo(ctx, req.(*UpdateClusterInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_DelClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelClusterInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).DelClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_DelClusterInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).DelClusterInfo(ctx, req.(*DelClusterInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetClusterInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterInfoByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetClusterInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetClusterInfoById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetClusterInfoById(ctx, req.(*GetClusterInfoByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_SearchClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchClusterInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).SearchClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_SearchClusterInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).SearchClusterInfo(ctx, req.(*SearchClusterInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_AddCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCourseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).AddCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_AddCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).AddCourse(ctx, req.(*AddCourseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_UpdateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).UpdateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_UpdateCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).UpdateCourse(ctx, req.(*UpdateCourseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_DelCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCourseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).DelCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_DelCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).DelCourse(ctx, req.(*DelCourseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetCourseById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetCourseById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetCourseById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetCourseById(ctx, req.(*GetCourseByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_SearchCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCourseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).SearchCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_SearchCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).SearchCourse(ctx, req.(*SearchCourseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_AddCuster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).AddCuster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_AddCuster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).AddCuster(ctx, req.(*AddCusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_UpdateCuster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).UpdateCuster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_UpdateCuster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).UpdateCuster(ctx, req.(*UpdateCusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_DelCuster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).DelCuster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_DelCuster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).DelCuster(ctx, req.(*DelCusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetCusterById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCusterByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetCusterById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetCusterById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetCusterById(ctx, req.(*GetCusterByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_SearchCuster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).SearchCuster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_SearchCuster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).SearchCuster(ctx, req.(*SearchCusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_AddStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStudentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).AddStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_AddStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).AddStudent(ctx, req.(*AddStudentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_UpdateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).UpdateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_UpdateStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).UpdateStudent(ctx, req.(*UpdateStudentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_DelStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelStudentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).DelStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_DelStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).DelStudent(ctx, req.(*DelStudentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetStudentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetStudentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetStudentById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetStudentById(ctx, req.(*GetStudentByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_SearchStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchStudentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).SearchStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_SearchStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).SearchStudent(ctx, req.(*SearchStudentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_AddStudentCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStudentCourseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).AddStudentCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_AddStudentCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).AddStudentCourse(ctx, req.(*AddStudentCourseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_UpdateStudentCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentCourseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).UpdateStudentCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_UpdateStudentCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).UpdateStudentCourse(ctx, req.(*UpdateStudentCourseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_DelStudentCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelStudentCourseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).DelStudentCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_DelStudentCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).DelStudentCourse(ctx, req.(*DelStudentCourseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetStudentCourseById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentCourseByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetStudentCourseById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetStudentCourseById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetStudentCourseById(ctx, req.(*GetStudentCourseByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_SearchStudentCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchStudentCourseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).SearchStudentCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_SearchStudentCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).SearchStudentCourse(ctx, req.(*SearchStudentCourseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_AddTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).AddTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_AddTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).AddTasks(ctx, req.(*AddTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_UpdateTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).UpdateTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_UpdateTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).UpdateTasks(ctx, req.(*UpdateTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_DelTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).DelTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_DelTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).DelTasks(ctx, req.(*DelTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetTasksById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetTasksById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetTasksById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetTasksById(ctx, req.(*GetTasksByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_SearchTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).SearchTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_SearchTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).SearchTasks(ctx, req.(*SearchTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_AddUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).AddUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_AddUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).AddUserInfo(ctx, req.(*AddUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_UpdateUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_DelUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).DelUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_DelUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).DelUserInfo(ctx, req.(*DelUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetUserInfoById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetUserInfoById(ctx, req.(*GetUserInfoByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_SearchUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).SearchUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_SearchUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).SearchUserInfo(ctx, req.(*SearchUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_AddWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWorkflowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).AddWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_AddWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).AddWorkflow(ctx, req.(*AddWorkflowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_UpdateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkflowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).UpdateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_UpdateWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).UpdateWorkflow(ctx, req.(*UpdateWorkflowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_DelWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelWorkflowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).DelWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_DelWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).DelWorkflow(ctx, req.(*DelWorkflowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetWorkflowById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetWorkflowById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetWorkflowById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetWorkflowById(ctx, req.(*GetWorkflowByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_SearchWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchWorkflowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).SearchWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_SearchWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).SearchWorkflow(ctx, req.(*SearchWorkflowReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Article_ServiceDesc is the grpc.ServiceDesc for Article service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Article_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.article",
	HandlerType: (*ArticleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAddrs",
			Handler:    _Article_AddAddrs_Handler,
		},
		{
			MethodName: "UpdateAddrs",
			Handler:    _Article_UpdateAddrs_Handler,
		},
		{
			MethodName: "DelAddrs",
			Handler:    _Article_DelAddrs_Handler,
		},
		{
			MethodName: "GetAddrsById",
			Handler:    _Article_GetAddrsById_Handler,
		},
		{
			MethodName: "SearchAddrs",
			Handler:    _Article_SearchAddrs_Handler,
		},
		{
			MethodName: "AddAlerts",
			Handler:    _Article_AddAlerts_Handler,
		},
		{
			MethodName: "UpdateAlerts",
			Handler:    _Article_UpdateAlerts_Handler,
		},
		{
			MethodName: "DelAlerts",
			Handler:    _Article_DelAlerts_Handler,
		},
		{
			MethodName: "GetAlertsById",
			Handler:    _Article_GetAlertsById_Handler,
		},
		{
			MethodName: "SearchAlerts",
			Handler:    _Article_SearchAlerts_Handler,
		},
		{
			MethodName: "AddArticle",
			Handler:    _Article_AddArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _Article_UpdateArticle_Handler,
		},
		{
			MethodName: "DelArticle",
			Handler:    _Article_DelArticle_Handler,
		},
		{
			MethodName: "GetArticleById",
			Handler:    _Article_GetArticleById_Handler,
		},
		{
			MethodName: "SearchArticle",
			Handler:    _Article_SearchArticle_Handler,
		},
		{
			MethodName: "AddClass",
			Handler:    _Article_AddClass_Handler,
		},
		{
			MethodName: "UpdateClass",
			Handler:    _Article_UpdateClass_Handler,
		},
		{
			MethodName: "DelClass",
			Handler:    _Article_DelClass_Handler,
		},
		{
			MethodName: "GetClassById",
			Handler:    _Article_GetClassById_Handler,
		},
		{
			MethodName: "SearchClass",
			Handler:    _Article_SearchClass_Handler,
		},
		{
			MethodName: "AddClusterInfo",
			Handler:    _Article_AddClusterInfo_Handler,
		},
		{
			MethodName: "UpdateClusterInfo",
			Handler:    _Article_UpdateClusterInfo_Handler,
		},
		{
			MethodName: "DelClusterInfo",
			Handler:    _Article_DelClusterInfo_Handler,
		},
		{
			MethodName: "GetClusterInfoById",
			Handler:    _Article_GetClusterInfoById_Handler,
		},
		{
			MethodName: "SearchClusterInfo",
			Handler:    _Article_SearchClusterInfo_Handler,
		},
		{
			MethodName: "AddCourse",
			Handler:    _Article_AddCourse_Handler,
		},
		{
			MethodName: "UpdateCourse",
			Handler:    _Article_UpdateCourse_Handler,
		},
		{
			MethodName: "DelCourse",
			Handler:    _Article_DelCourse_Handler,
		},
		{
			MethodName: "GetCourseById",
			Handler:    _Article_GetCourseById_Handler,
		},
		{
			MethodName: "SearchCourse",
			Handler:    _Article_SearchCourse_Handler,
		},
		{
			MethodName: "AddCuster",
			Handler:    _Article_AddCuster_Handler,
		},
		{
			MethodName: "UpdateCuster",
			Handler:    _Article_UpdateCuster_Handler,
		},
		{
			MethodName: "DelCuster",
			Handler:    _Article_DelCuster_Handler,
		},
		{
			MethodName: "GetCusterById",
			Handler:    _Article_GetCusterById_Handler,
		},
		{
			MethodName: "SearchCuster",
			Handler:    _Article_SearchCuster_Handler,
		},
		{
			MethodName: "AddStudent",
			Handler:    _Article_AddStudent_Handler,
		},
		{
			MethodName: "UpdateStudent",
			Handler:    _Article_UpdateStudent_Handler,
		},
		{
			MethodName: "DelStudent",
			Handler:    _Article_DelStudent_Handler,
		},
		{
			MethodName: "GetStudentById",
			Handler:    _Article_GetStudentById_Handler,
		},
		{
			MethodName: "SearchStudent",
			Handler:    _Article_SearchStudent_Handler,
		},
		{
			MethodName: "AddStudentCourse",
			Handler:    _Article_AddStudentCourse_Handler,
		},
		{
			MethodName: "UpdateStudentCourse",
			Handler:    _Article_UpdateStudentCourse_Handler,
		},
		{
			MethodName: "DelStudentCourse",
			Handler:    _Article_DelStudentCourse_Handler,
		},
		{
			MethodName: "GetStudentCourseById",
			Handler:    _Article_GetStudentCourseById_Handler,
		},
		{
			MethodName: "SearchStudentCourse",
			Handler:    _Article_SearchStudentCourse_Handler,
		},
		{
			MethodName: "AddTasks",
			Handler:    _Article_AddTasks_Handler,
		},
		{
			MethodName: "UpdateTasks",
			Handler:    _Article_UpdateTasks_Handler,
		},
		{
			MethodName: "DelTasks",
			Handler:    _Article_DelTasks_Handler,
		},
		{
			MethodName: "GetTasksById",
			Handler:    _Article_GetTasksById_Handler,
		},
		{
			MethodName: "SearchTasks",
			Handler:    _Article_SearchTasks_Handler,
		},
		{
			MethodName: "AddUserInfo",
			Handler:    _Article_AddUserInfo_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _Article_UpdateUserInfo_Handler,
		},
		{
			MethodName: "DelUserInfo",
			Handler:    _Article_DelUserInfo_Handler,
		},
		{
			MethodName: "GetUserInfoById",
			Handler:    _Article_GetUserInfoById_Handler,
		},
		{
			MethodName: "SearchUserInfo",
			Handler:    _Article_SearchUserInfo_Handler,
		},
		{
			MethodName: "AddWorkflow",
			Handler:    _Article_AddWorkflow_Handler,
		},
		{
			MethodName: "UpdateWorkflow",
			Handler:    _Article_UpdateWorkflow_Handler,
		},
		{
			MethodName: "DelWorkflow",
			Handler:    _Article_DelWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflowById",
			Handler:    _Article_GetWorkflowById_Handler,
		},
		{
			MethodName: "SearchWorkflow",
			Handler:    _Article_SearchWorkflow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "article.proto",
}
