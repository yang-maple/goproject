// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: article.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Article_AddCuster_FullMethodName     = "/pb.article/AddCuster"
	Article_UpdateCuster_FullMethodName  = "/pb.article/UpdateCuster"
	Article_DelCuster_FullMethodName     = "/pb.article/DelCuster"
	Article_GetCusterById_FullMethodName = "/pb.article/GetCusterById"
	Article_SearchCuster_FullMethodName  = "/pb.article/SearchCuster"
)

// ArticleClient is the client API for Article service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleClient interface {
	// -----------------------Custer-----------------------
	AddCuster(ctx context.Context, in *AddCusterReq, opts ...grpc.CallOption) (*AddCusterResp, error)
	UpdateCuster(ctx context.Context, in *UpdateCusterReq, opts ...grpc.CallOption) (*UpdateCusterResp, error)
	DelCuster(ctx context.Context, in *DelCusterReq, opts ...grpc.CallOption) (*DelCusterResp, error)
	GetCusterById(ctx context.Context, in *GetCusterByIdReq, opts ...grpc.CallOption) (*GetCusterByIdResp, error)
	SearchCuster(ctx context.Context, in *SearchCusterReq, opts ...grpc.CallOption) (*SearchCusterResp, error)
}

type articleClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleClient(cc grpc.ClientConnInterface) ArticleClient {
	return &articleClient{cc}
}

func (c *articleClient) AddCuster(ctx context.Context, in *AddCusterReq, opts ...grpc.CallOption) (*AddCusterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCusterResp)
	err := c.cc.Invoke(ctx, Article_AddCuster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) UpdateCuster(ctx context.Context, in *UpdateCusterReq, opts ...grpc.CallOption) (*UpdateCusterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCusterResp)
	err := c.cc.Invoke(ctx, Article_UpdateCuster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) DelCuster(ctx context.Context, in *DelCusterReq, opts ...grpc.CallOption) (*DelCusterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelCusterResp)
	err := c.cc.Invoke(ctx, Article_DelCuster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetCusterById(ctx context.Context, in *GetCusterByIdReq, opts ...grpc.CallOption) (*GetCusterByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCusterByIdResp)
	err := c.cc.Invoke(ctx, Article_GetCusterById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) SearchCuster(ctx context.Context, in *SearchCusterReq, opts ...grpc.CallOption) (*SearchCusterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchCusterResp)
	err := c.cc.Invoke(ctx, Article_SearchCuster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServer is the server API for Article service.
// All implementations must embed UnimplementedArticleServer
// for forward compatibility.
type ArticleServer interface {
	// -----------------------Custer-----------------------
	AddCuster(context.Context, *AddCusterReq) (*AddCusterResp, error)
	UpdateCuster(context.Context, *UpdateCusterReq) (*UpdateCusterResp, error)
	DelCuster(context.Context, *DelCusterReq) (*DelCusterResp, error)
	GetCusterById(context.Context, *GetCusterByIdReq) (*GetCusterByIdResp, error)
	SearchCuster(context.Context, *SearchCusterReq) (*SearchCusterResp, error)
	mustEmbedUnimplementedArticleServer()
}

// UnimplementedArticleServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArticleServer struct{}

func (UnimplementedArticleServer) AddCuster(context.Context, *AddCusterReq) (*AddCusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCuster not implemented")
}
func (UnimplementedArticleServer) UpdateCuster(context.Context, *UpdateCusterReq) (*UpdateCusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCuster not implemented")
}
func (UnimplementedArticleServer) DelCuster(context.Context, *DelCusterReq) (*DelCusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCuster not implemented")
}
func (UnimplementedArticleServer) GetCusterById(context.Context, *GetCusterByIdReq) (*GetCusterByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCusterById not implemented")
}
func (UnimplementedArticleServer) SearchCuster(context.Context, *SearchCusterReq) (*SearchCusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCuster not implemented")
}
func (UnimplementedArticleServer) mustEmbedUnimplementedArticleServer() {}
func (UnimplementedArticleServer) testEmbeddedByValue()                 {}

// UnsafeArticleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleServer will
// result in compilation errors.
type UnsafeArticleServer interface {
	mustEmbedUnimplementedArticleServer()
}

func RegisterArticleServer(s grpc.ServiceRegistrar, srv ArticleServer) {
	// If the following call pancis, it indicates UnimplementedArticleServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Article_ServiceDesc, srv)
}

func _Article_AddCuster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).AddCuster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_AddCuster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).AddCuster(ctx, req.(*AddCusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_UpdateCuster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).UpdateCuster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_UpdateCuster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).UpdateCuster(ctx, req.(*UpdateCusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_DelCuster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).DelCuster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_DelCuster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).DelCuster(ctx, req.(*DelCusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetCusterById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCusterByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetCusterById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetCusterById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetCusterById(ctx, req.(*GetCusterByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_SearchCuster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).SearchCuster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_SearchCuster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).SearchCuster(ctx, req.(*SearchCusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Article_ServiceDesc is the grpc.ServiceDesc for Article service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Article_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.article",
	HandlerType: (*ArticleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCuster",
			Handler:    _Article_AddCuster_Handler,
		},
		{
			MethodName: "UpdateCuster",
			Handler:    _Article_UpdateCuster_Handler,
		},
		{
			MethodName: "DelCuster",
			Handler:    _Article_DelCuster_Handler,
		},
		{
			MethodName: "GetCusterById",
			Handler:    _Article_GetCusterById_Handler,
		},
		{
			MethodName: "SearchCuster",
			Handler:    _Article_SearchCuster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "article.proto",
}
